import org.apache.tools.ant.taskdefs.condition.Os

// Apply the java plugin to add support for Java
apply plugin: 'groovy'
apply from: "gradle/osSpecificDownloads.gradle"

ext {
    // The drivers we want to use
    drivers = ["chrome"]
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'com.aoe:geb-spock-reports:0.1.4'

    //
    // groovy
    //
    testCompile "org.codehaus.groovy:groovy-all:2.4.6"

    //
    // geb
    //
    testCompile "org.gebish:geb-spock:1.1.1"

    //
    // selenium
    //
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:3.9.1"
    //testCompile "org.seleniumhq.selenium:selenium-firefox-driver:3.9.1"
    testCompile "org.seleniumhq.selenium:selenium-support:3.9.1"
    testCompile "io.github.bonigarcia:webdrivermanager:1.4.10"

    //
    // spock
    //
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-2"

    //
    // geb/spock integration
    //
    testCompile ("com.athaydes:spock-reports:1.3.1") { transitive = false }

    //
    // approvals
    //
    testCompile 'net.avh4.util:imagecomparison:0.3.1'
    testCompile 'com.github.nikolavp:approval-core:0.3'

    //
    // logging
    //
    testCompile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'


}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

test {
    def reportsDir = file("$buildDir/geb-spock-reports")
    if(reportsDir.exists()) {
        print "deleting: ${reportsDir}"
        reportsDir.delete()
    }

    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}
